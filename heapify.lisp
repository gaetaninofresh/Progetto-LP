(defun heapify (heap-id index)
    (let 
        (
            (node (aref (get-actual-heap heap-id) index))
            (left (aref (get-actual-heap heap-id) (left-child index)))
            (right (aref (get-actual-heap heap-id) (right-child index)))
        )
        
        ;caso base: il nodo Ã¨ una foglia
        (if (and (nil left) (nil right))
            T
        )
        ;caso solo figlio sinistro
        (if (nil right)
            (if (> (first node) (first left))
                (swap heap-id index (left-child index))
            )
        )
        (if(and(not(nil right))(not(nil left)))
            (if(and(<= (first node) (first left))(> (first node) (first right)))
                (swap heap-id index (right-child index))
            )
        )
        (if(and(not(nil right))(not(nil left)))
            (if(and(<= (first node) (first right))(> (first node) (first left)))
                (swap heap-id index (left-child index))
            )
        )
        (if(and(not(nil right))(not(nil left)))
            (if(and(> (first node) (first left))(> (first node) (first right)))
                if(> (first left) (first right))
                   (swap head-id index (right-child index))
            )
        )
        (if(and(not(nil right))(not(nil left)))
            (if(and(> (first node) (first left))(> (first node) (first right)))
                if(> (first right) (first left))
                   (swap head-id index (left-child index))
            )
        )
    )
)
